//ÁªôÂá∫‰∏§‰∏™ ÈùûÁ©∫ ÁöÑÈìæË°®Áî®Êù•Ë°®Á§∫‰∏§‰∏™ÈùûË¥üÁöÑÊï¥Êï∞„ÄÇÂÖ∂‰∏≠ÔºåÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ΩçÊï∞ÊòØÊåâÁÖß ÈÄÜÂ∫è ÁöÑÊñπÂºèÂ≠òÂÇ®ÁöÑÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™ËÉΩÂ≠òÂÇ® ‰∏Ä‰Ωç Êï∞Â≠ó„ÄÇ 
//
// Â¶ÇÊûúÔºåÊàë‰ª¨Â∞ÜËøô‰∏§‰∏™Êï∞Áõ∏Âä†Ëµ∑Êù•ÔºåÂàô‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®Êù•Ë°®Á§∫ÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ 
//
// ÊÇ®ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞ÈÉΩ‰∏ç‰ºö‰ª• 0 ÂºÄÂ§¥„ÄÇ 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 0 -> 8
//ÂéüÂõ†Ôºö342 + 465 = 807
// 
// Related Topics ÈìæË°® Êï∞Â≠¶ 
// üëç 5239 üëé 0


package leetcode.editor.cn;
/**
* JavaÔºö‰∏§Êï∞Áõ∏Âä†
* dateÔºö2020-11-12 10:13:42
**/
public class P2AddTwoNumbers{
    public static void main(String[] args) {
        Solution solution = new P2AddTwoNumbers().new Solution();
        // TO TEST
        ListNode a = new ListNode(9);
        ListNode b = new ListNode(1);
        ListNode c = new ListNode(9);
        b.next = c;
        solution.addTwoNumbers(a, b);
    }
    //leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        ListNode res = l1;
        int carry = 0;
        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            l1.val = sum % 10;
            carry = sum / 10;
            if (l1.next == null && l2.next == null) {
                if (carry == 1) {
                    ListNode tmp = new ListNode(1);
                    l1.next = tmp;
                    l1 = l1.next.next;
                    carry = 0;
                } else {
                    break;
                }
            } else if (l1.next == null) {
                l1.next = l2.next;
                l1 = l1.next;
                l2 = null;
            } else {
                l1 = l1.next;
                l2 = l2.next;
            }
        }
        while (carry == 1) {
            int sum = l1.val + carry;
            l1.val = sum % 10;
            carry = sum / 10;
            if (l1.next == null) {
                if (carry == 1) {
                    ListNode tmp = new ListNode(1);
                    l1.next = tmp;
                    carry = 0;
                }
            } else {
                l1 = l1.next;
            }
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
